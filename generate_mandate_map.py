"""Generate interactive choropleth map of French departments.

This script downloads French department boundaries, merges them with mandate
and personal information data, computes aggregated metrics, and outputs an
interactive HTML map along with lightweight documentation.

Outputs created under ``documentation/geo/`` when the script is executed:

* ``departements.shp`` (and supporting files): shapefile of French departments
* ``mandate_map.html``: interactive choropleth map
* ``README.md``: short note referencing the map

The repository does not store these outputs; run this script locally to
reproduce them.
"""
from __future__ import annotations

import io
import os
from pathlib import Path
import warnings

import pandas as pd
import geopandas as gpd
import folium
import requests
from urllib3.exceptions import InsecureRequestWarning

# Suppress SSL warnings since the environment may use a self-signed proxy
warnings.simplefilter("ignore", InsecureRequestWarning)

DATA_DIR = Path("documentation/geo")
SHAPE_URL = (
    "https://raw.githubusercontent.com/gregoiredavid/france-geojson/master/departements.geojson"
)


def download_shapefile() -> Path:
    """Download GeoJSON and convert to a shapefile."""
    DATA_DIR.mkdir(parents=True, exist_ok=True)
    shp_base = DATA_DIR / "departements"
    if all((DATA_DIR / f"departements.{ext}").exists() for ext in ["shp", "shx", "dbf", "prj", "cpg"]):
        return shp_base.with_suffix(".shp")
    resp = requests.get(SHAPE_URL, verify=False, timeout=60)
    resp.raise_for_status()
    geojson = io.BytesIO(resp.content)
    gdf = gpd.read_file(geojson)
    gdf.to_file(shp_base.with_suffix(".shp"), driver="ESRI Shapefile")
    return shp_base.with_suffix(".shp")


def load_data() -> pd.DataFrame:
    """Load mandate features and personal info, joined on names."""
    mandates = pd.read_csv("mandates_features.csv", dtype={"departement": str})
    personal = pd.read_csv(
        "personal_info_with_gender.csv",
        usecols=["prenom", "nom", "age", "gender"],
        dtype={"prenom": str, "nom": str, "age": float, "gender": str},
    )
    df = mandates.merge(personal, on=["prenom", "nom"], how="left")
    df["departement"] = df["departement"].str.zfill(2)
    return df


def aggregate_stats(df: pd.DataFrame) -> pd.DataFrame:
    """Aggregate demographic statistics by department."""
    grouped = df.groupby("departement").agg(
        avg_age=("age", "mean"),
        female_share=("gender", lambda s: (s == "female").mean() * 100),
        avg_delay=("delay_days", "mean"),
    )
    return grouped.reset_index()


def build_geodata(stats: pd.DataFrame, shp_path: Path) -> gpd.GeoDataFrame:
    """Merge statistics with the department boundaries."""
    depts = gpd.read_file(shp_path)
    depts["code"] = depts["code"].astype(str).str.zfill(2)
    merged = depts.merge(stats, left_on="code", right_on="departement", how="left")
    return merged


def make_map(gdf: gpd.GeoDataFrame) -> folium.Map:
    """Create a folium map with choropleth layers."""
    m = folium.Map(location=[46.5, 2.5], zoom_start=5, tiles="cartodbpositron")
    layers = [
        ("avg_age", "Average Age", "BuPu"),
        ("female_share", "Female %", "PuRd"),
        ("avg_delay", "Average Delay Days", "YlGnBu"),
    ]
    for col, name, palette in layers:
        chor = folium.Choropleth(
            geo_data=gdf,
            data=gdf,
            columns=["code", col],
            key_on="feature.properties.code",
            fill_color=palette,
            nan_fill_color="lightgrey",
            legend_name=name,
            name=name,
        )
        chor.add_to(m)
        folium.GeoJsonTooltip(
            fields=["nom", "code", col],
            aliases=["DÃ©partement", "Code", name],
            localize=True,
        ).add_to(chor.geojson)
    folium.LayerControl().add_to(m)
    return m


def write_docs():
    readme = DATA_DIR / "README.md"
    readme.write_text(
        "# Geographical mandate map\n\n"
        "This directory is generated by `generate_mandate_map.py`.\n"
        "Run the script to download administrative boundaries and to produce\n"
        "`mandate_map.html`, an interactive choropleth showing average age, gender\n"
        "balance, and filing delay by department.\n"
    )


def main() -> None:
    shp_path = download_shapefile()
    df = load_data()
    stats = aggregate_stats(df)
    gdf = build_geodata(stats, shp_path)
    m = make_map(gdf)
    DATA_DIR.mkdir(parents=True, exist_ok=True)
    map_path = DATA_DIR / "mandate_map.html"
    m.save(map_path)
    write_docs()
    print(f"Saved interactive map to {map_path}")


if __name__ == "__main__":
    main()
